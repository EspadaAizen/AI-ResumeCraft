from fastapi import APIRouter
import os, json, requests
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
router = APIRouter()

# Default provider (mock if nothing set)
PROVIDER = os.getenv("AI_PROVIDER", "mock").lower()

if PROVIDER == "openai":
    client = OpenAI()


def generate_with_ollama(prompt: str):
    """Parse Ollama stream into plain text."""
    r = requests.post(
        "http://localhost:11434/api/generate",
        json={"model": "llama2", "prompt": prompt},
        stream=True,
        timeout=60
    )
    output = ""
    for line in r.iter_lines():
        if not line:
            continue
        try:
            obj = json.loads(line.decode("utf-8"))
            output += obj.get("response", "") or obj.get("text", "")
        except Exception:
            continue
    return output


@router.post("/rewrite")
def rewrite_resume(data: dict):
    bullets = data.get("bullets", [])
    if not bullets:
        return {"error": "No bullets provided"}

    provider = data.get("provider", PROVIDER).lower()

    prompt = (
        "Rewrite these resume bullet points in a professional, action-oriented style. "
        "Use strong verbs, quantify impact when possible, and keep them short (<= 25 words). "
        "Return each rewritten bullet on its own line, starting with a dash (-).\n\n"
        + "\n".join([f"- {b}" for b in bullets])
    )

    try:
        if provider == "mock":
            return {"rewritten": [f"Improved: {b}" for b in bullets], "note": "mock output (no AI call)"}

        if provider == "ollama":
            rewritten_text = generate_with_ollama(prompt)
            rewritten = [line.strip("- ").strip() for line in rewritten_text.split("\n") if line.strip()]
            return {"rewritten": rewritten, "note": "generated by Ollama (local)"}

        if provider == "openai":
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=400,
                temperature=0.6,
            )
            text = response.choices[0].message.content.strip()
            rewritten = [line.strip("- ").strip() for line in text.split("\n") if line.strip()]
            return {"rewritten": rewritten, "note": "generated by OpenAI"}

        return {"error": f"Unknown provider: {provider}"}

    except Exception as e:
        return {"error": str(e)}
